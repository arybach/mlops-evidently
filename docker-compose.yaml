version: "3.9"

services:

  # ssl_generator:
  #   build:
  #     context: .
  #     dockerfile: fastapi/Dockerfile
  #     args:
  #       USER_ID: ${USER_ID:-1000}
  #   container_name: ssl_generator
  #   volumes:
  #     - ./:/home/evidently-fastapi
  #   command: ["./generate_ssl.sh"]  # Run the SSL generation script for Fastapi and Streamlit
  #   networks:
  #     - monitoring

  fastapi_app:
    build:
      context: .
      dockerfile: fastapi/Dockerfile
      args:
        USER_ID: ${USER_ID:-1000}
    image: fastapi_app:latest
    container_name: fastapi_app
    restart: always
    volumes:
      - ./:/home/evidently-fastapi
    environment:
      - "MONITORING_DB_HOST=monitoring-db-postgres"
      - "POSTGRES_USER=${POSTGRES_USER}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}"
      # - "SSL_CERT_PATH=/home/evidently-fastapi/tls/certs/fastapi/server.crt"
      # - "SSL_KEY_PATH=/home/evidently-fastapi/tls/certs/fastapi/server.key"
    ports:
      - 5000:5000
    networks:
      - monitoring
 
  monitoring-db:
    image: postgres:15.2-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: "monitoring_db"
      PGDATA: "/var/lib/postgresql/data/pgdata"
      POSTGRES_MAX_CONNECTIONS: "200"  # maximum connection limit here
    container_name: monitoring-db-postgres
    restart: unless-stopped
    ports:
      - 5432:5432
    networks:
      - monitoring
    volumes:
      - monitoring_db_data:/var/lib/postgresql/data
      # - ./sql:/docker-entrypoint-initdb.d  # Mount the SQL script as an initialization script to create new user and grant priveleges
    # command: ["/usr/local/bin/docker-entrypoint.sh", "postgres", "-c", "ssl=on", "-c", "ssl_cert_file=/var/lib/postgresql/server/server.crt", "-c", "ssl_key_file=/var/lib/postgresql/server/server.key"]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d monitoring_db -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  streamlit_app:
    build:
      context: streamlit_app
      dockerfile: Dockerfile
    image: streamlit_app:latest
    container_name: streamlit_app
    restart: always
    volumes:
      - ./:/home/evidently-fastapi
    environment:
      - FASTAPI_APP_HOST=fastapi_app
      # - "SSL_CERT_PATH=/home/evidently-fastapi/tls/certs/streamlit/server.crt"
      # - "SSL_KEY_PATH=/home/evidently-fastapi/tls/certs/streamlit/server.key"
    ports:
      - 8501:8501
    networks:
      - monitoring

volumes:
    monitoring_db_data: {}

networks:
  monitoring:
    name: monitoring